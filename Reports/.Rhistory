print("Undefined row found in question "+ question + " in row " + row)
} else {
return
}
}
mapply(check_undefined, data$a1_score, seq(nrow(data)), MoreArgs = list(1))
check_undefined <- function(value, row, question) {
if (value == "?") {
print("Undefined row found in question "+ question + " in row " + row)
} else {
return;
}
}
mapply(check_undefined, data$a1_score, seq(nrow(data)), MoreArgs = list(1))
check_undefined <- function(value, row, question) {
if (value == "?") {
print("Undefined row found in question "+ question + " in row " + row)
} else {
return FALSE;
check_undefined <- function(value, row, question) {
if (value == "?") {
print("Undefined row found in question "+ question + " in row " + row)
} else {
return TRUE;
check_undefined <- function(value, row, question) {
if (value == "?") {
print("Undefined row found in question "+ question + " in row " + row)
} else {
return(TRUE);
}
}
mapply(check_undefined, data$a1_score, seq(nrow(data)), MoreArgs = list(1))
check_undefined <- function(value, row, question) {
if (value == "?") {
print("Undefined row found in question "+ question + " in row " + row)
} else {
return(TRUE);
}
}
all_true(is_true) {
check_undefined <- function(value, row, question) {
if (value == "?") {
print("Undefined row found in question "+ question + " in row " + row)
} else {
return(TRUE);
}
}
all_true <- function(is_true) {
return(TRUE);
}
apply(mapply(check_undefined, data$a1_score, seq(nrow(data)), MoreArgs = list(1)), FUN = all_true)
data$a1_score[2] <- "?"
check_undefined <- function(value, row, question) {
if (value == "?") {
print("Undefined row found in question "+ question + " in row " + row)
} else {
return(TRUE);
}
}
all_true <- function(is_true) {
return(TRUE);
}
apply(mapply(check_undefined, data$a1_score, seq(nrow(data)), MoreArgs = list(1)), FUN = all_true)
data$a1_score[2] <- "?"
check_undefined <- function(value, row, question) {
if (value == "?") {
print("Undefined row found in question "+ question + " in row " + row)
} else {
return(TRUE);
}
}
all_true <- function(is_true) {
return(TRUE);
}
mapply(check_undefined, data$a1_score, seq(nrow(data)), MoreArgs = list(1))
data$a1_score[2] <- "?"
check_undefined <- function(value, row, question) {
if (value == "?") {
print("Undefined row found in question "+ as.character(question) + " in row " + as.character(row))
} else {
return(TRUE);
}
}
all_true <- function(is_true) {
return(TRUE);
}
mapply(check_undefined, data$a1_score, seq(nrow(data)), MoreArgs = list(1))
print("Undefined row found in question "+ as.character(question) + " in row " + as.character(row))
question <- 1
row <- 1
print("Undefined row found in question "+ as.character(question) + " in row " + as.character(row))
print("Undefined row found in question "+ as.character(question) + " in row " + as.character(row))
"A" + "A"
print("A", "A")
data$a1_score[2] <- "?"
check_undefined <- function(value, row, question) {
if (value == "?") {
paste0("Undefined row found in question ", as.character(question), " in row ", as.character(row))
} else {
return(TRUE);
}
}
all_true <- function(is_true) {
return(TRUE);
}
mapply(check_undefined, data$a1_score, seq(nrow(data)), MoreArgs = list(1))
data$a1_score[2] <- "?"
check_undefined <- function(value, row, question) {
if (value == "?") {
paste0("Undefined row found in question ", as.character(question), " in row ", as.character(row)
}
data$a1_score[2] <- "?"
check_undefined <- function(value, row, question) {
if (value == "?") {
paste0("Undefined row found in question ", as.character(question), " in row ", as.character(row))
}
}
mapply(check_undefined, data$a1_score, seq(nrow(data)), MoreArgs = list(1))
data$a1_score[2] <- "?"
check_undefined <- function(value, row, question) {
if (value == "?") {
paste0("Undefined row found in question ", as.character(question), " in row ", as.character(row))
}
}
mapply(check_undefined, data$a1_score, seq(nrow(data)), MoreArgs = list(1))
if ("?" %in% data$a1_score) {
print("NO")
}
data <- read.csv('Autism_Data.arff')
codebook <- read.csv('codebook.csv')
colnames(data) <- codebook$Variable.name.short
get_readable <- function(short) {
if (!short %in% codebook$Variable.name.short) {
return("This isn't a column")
}
}
knitr::kable(codebook)
get_readable("A")
which(codebook$Variable.name.short == short)
which(codebook$Variable.name.short == "a")
which(codebook$Variable.name.short == "a1_score")
which(codebook$Variable.name.short == "a10_score")
data <- read.csv('Autism_Data.arff')
codebook <- read.csv('codebook.csv')
colnames(data) <- codebook$Variable.name.short
get_readable <- function(short) {
if (!short %in% codebook$Variable.name.short) {
return("This isn't a column")
} else {
return(codebook$Variable.name.human.readable[which(codebook$Variable.name.short == short)])
}
}
knitr::kable(codebook)
get_readable("a1_score")
if ("?" %in% data$a1_score) {
paste0(get_readable(("a1_score")))
}
if ("?" %in% data$a1_score) {
paste0(get_readable(("a1_score")))
}
data$a1_score[1] = "?"
if ("?" %in% data$a1_score) {
paste0(get_readable(("a1_score")))
}
if ("?" %in% data$a1_score) {
paste0(get_readable(("a1_score")), " has an INVALID value!")
}
if ("?" %in% data$a1_score) {
paste0(get_readable("a1_score"), " has an INVALID value!")
} else {
paste0(get_readable("a1_score"), " only has valid values!")
}
for (question in 1:10) {
if ("?" %in% data[question,]) {
paste0("Anwser question ", as.character(question), " has an INVALID value!")
} else {
paste0("Anwser question ", as.character(question), " only has valid values!")
}
}
for (question in 1:10) {
if ("?" %in% data[question,]) {
paste0("Anwser question ", as.character(question), " has an INVALID value!")
} else {
paste0("Anwser question ", as.character(question), " only has valid values!")
}
}
for (question in 1:10) {}
summary(data)
data$a1_score[data$a10_score == "?"] <- NA
data$a1_score[data$a10_score == "?"] <- NA
summaru(data)
data$a1_score[data$a10_score == "?"] <- NA
summary(data)
data$a1_score[data$a10_score == "?"] <- NA
summary(data)
data[data == "?"] <- NA
summary(data)
data$age
data[data == "?"] <- NA
data <- lapply(df, as.numeric)
data[data == "?"] <- NA
data <- as.numeric(data)
install.packages("dplyr")
library(dplyr)
install.packages("dplyr")
install.packages("dplyr")
library(dplyr)
install.packages("dplyr")
knitr::opts_chunk$set(echo = TRUE)
install.packages("dplyr")
library(dplyr)
install.packages("dplyr")
library(dplyr)
knitr::opts_chunk$set(echo = TRUE)
data[data == "?"] <- NA
data <- data %>% mutate_if(is.character,as.numeric)
summary(data)
data[data == "?"] <- NA
data[1,11] <- data[1,11] %>% mutate_if(is.character,as.numeric)
data[data == "?"] <- NA
data[1:11] <- data[1:11] %>% mutate_if(is.character,as.numeric)
summary(data)
data <- read.csv('Autism_Data.arff')
codebook <- read.csv('codebook.csv')
colnames(data) <- codebook$Variable.name.short
get_readable <- function(short) {
if (!short %in% codebook$Variable.name.short) {
return("This isn't a column")
} else {
return(codebook$Variable.name.human.readable[which(codebook$Variable.name.short == short)])
}
}
knitr::kable(codebook)
data[data == "?"] <- NA
data[1:11] <- data[1:11] %>% mutate_if(is.character,as.numeric)
summary(data)
data[data == "?"] <- NA
data[1:11] <- as.numberic(data[1:11])
data[data == "?"] <- NA
data[1:11] <- as.numeric(data[1:11])
data[data == "?"] <- NA
data[1:11] <- data[1:11] %>% mutate_if(is.character,as.numeric)
data$end_score <- data$end_score %>% mutate_if(is.character,as.numeric)
data[data == "?"] <- NA
data[1:11] <- data[1:11] %>% mutate_if(is.character,as.numeric)
summary(data)
which(is.na(data$age))
which(is.na(data$age))
data.drop(63)
library(panda)
library(pandas)
data.frame()
help(data.frame)
data <- data[-c(63, 92)]
summary(data)
data <- data[-c(63, 92)]
data <- data[-c(63, 92)]
data <- data[,-c(63, 92)]
summary(data)
data <- read.csv('Autism_Data.arff')
codebook <- read.csv('codebook.csv')
colnames(data) <- codebook$Variable.name.short
get_readable <- function(short) {
if (!short %in% codebook$Variable.name.short) {
return("This isn't a column")
} else {
return(codebook$Variable.name.human.readable[which(codebook$Variable.name.short == short)])
}
}
knitr::kable(codebook)
summary(data)
data[data == "?"] <- NA
data[1:11] <- data[1:11] %>% mutate_if(is.character,as.numeric)
summary(data)
which(is.na(data$age))
data <- data[-c(63, 92), ]
which(is.na(data$age))
data <- data[-c(63, 92), ]
summary(data)
which(is.na(data$age))
data <- data[-c(63, 92), ]
boxplot(data$autism)
boxplot(data$age)
data$age
max(c(1, 2))
max(data$age)
which(data$age == 383)
boxplot(data$age, title="A")
boxplot(data$age, title="A", ylab="Age")
boxplot(data$age, main="A", ylab="Age")
boxplot(data$age, main="Age of people taking ASD test", ylab="Age")
boxplot(data$age, main="Age of people taking ASD test", ylab="Age", col="Coral")
boxplot(data$age, main="Age of people taking ASD test", ylab="Age", col="sea")
boxplot(data$age, main="Age of people taking ASD test", ylab="Age", col="Sea")
boxplot(data$age, main="Age of people taking ASD test", ylab="Age", col="cadetblue1")
data <- data[-c(which(data$age == 383),)]
data <- data[-c(which(data$age == 383)),]
boxplot(data$age, main="Age of people taking ASD test", ylab="Age", col="cadetblue1")
plot(data[1:10])
data <- data[-c(which(data$age == 383)),]
boxplot(data$age, main="Age of people taking ASD test", ylab="Age", col="cadetblue1")
data <- data[-c(which(is.na(data$age))), ]
boxplot(data$age, main="Age of people taking ASD test", ylab="Age", col="cadetblue1")
data$age
data <- read.csv('Autism_Data.arff')
codebook <- read.csv('codebook.csv')
colnames(data) <- codebook$Variable.name.short
get_readable <- function(short) {
if (!short %in% codebook$Variable.name.short) {
return("This isn't a column")
} else {
return(codebook$Variable.name.human.readable[which(codebook$Variable.name.short == short)])
}
}
knitr::kable(codebook)
data[data == "?"] <- NA
data[1:11] <- data[1:11] %>% mutate_if(is.character,as.numeric)
summary(data)
data <- data[-c(which(is.na(data$age))), ]
boxplot(data$age, main="Age of people taking ASD test", ylab="Age", col="cadetblue1")
data <- data[-c(which(data$age == 383)),]
boxplot(data$age, main="Age of people taking ASD test", ylab="Age", col="cadetblue1")
data <- data[-c(which(data$age == 383)),]
plot(data$age ~ data$autism)
boxplot(data$age, data$autism)
freq(data$a1_score)
frequency(data$a1_score)
barplot(data$a1_score)
barplot(data$a1_score, data$autism)
barplot(data$a1_score)
data$a1_score
plot(data$a1_score)
plot(0:10)
data$a10_score
knitr::opts_chunk$set(echo = TRUE)
install.packages("dplyr")
library(dplyr)
data <- read.csv('Autism_Data.arff')
codebook <- read.csv('codebook.csv')
colnames(data) <- codebook$Variable.name.short
get_readable <- function(short) {
if (!short %in% codebook$Variable.name.short) {
return("This isn't a column")
} else {
return(codebook$Variable.name.human.readable[which(codebook$Variable.name.short == short)])
}
}
knitr::kable(codebook)
ncol(data)
nrow(data)
data[data == "?"] <- NA
data[1:11] <- data[1:11] %>% mutate_if(is.character,as.numeric)
summary(data)
data <- data[-c(which(is.na(data$age))), ]
boxplot(data$age, main="Age of people taking ASD test", ylab="Age", col="cadetblue1")
data <- data[-c(which(data$age == 383)),]
boxplot(data$age, main="Age of people taking ASD test", ylab="Age", col="cadetblue1")
plot(data$a1_score)
data$a1_score
plot(data$a1_score)
barplot(data$a1_score)
barplot(data$a1_score)
hist(data$a1_score)
hist(data$a1_score, dist=1)
help(hist)
hist(data$a1_score, breaks=2)
hist(data$a1_score, breaks=2, col = c("cadetblue1","cadetblue2"))
hist(data$a1_score, breaks=2, col = c("cadetblue1","cadetblue3"))
hist(data$a1_score, breaks=2, col = c("cadetblue1","cadetblue4"))
hist(data$a1_score, breaks=2, col = c("cadetblue1","cadetblue3"))
hist(data$a1_score, breaks=2, col = c("cadetblue1","cadetblue3"), dist=1)
hist(data$a1_score, breaks=2, col = c("cadetblue1","cadetblue3"), dist=10)
hist(data$a1_score, breaks=2, col = c("cadetblue1","cadetblue3"), width=10)
hist(data$a1_score, breaks=2, col = c("cadetblue1","cadetblue3"), bin_width=10)
hist(data$a1_score, breaks=2, col = c("cadetblue1","cadetblue3"), binwidth=10)
hist(data$a1_score, breaks=2, col = c("cadetblue1","cadetblue3"))
install.packages(ggplot2)
install.packages("dplyr")
install.packages("ggplot2")                                        # Install and load ggplot2
knitr::opts_chunk$set(echo = TRUE)
data <- read.csv('Autism_Data.arff')
data
count(data$austim)
knitr::opts_chunk$set(echo = TRUE)
data <- read.csv('Autism_Data.arff')
codebook <- read.csv('codebook.csv')
colnames(data) <- codebook$Variable.name.short
knitr::opts_chunk$set(echo = TRUE)
install.packages("ggplot2")  # Install and load ggplot2
install.packages("dplyr")
install.packages("viridis")  # Install
library("ggplot2")
library("dplyr")
library("viridis")
data <- read.csv('Autism_Data.arff')
codebook <- read.csv('codebook.csv')
colnames(data) <- codebook$Variable.name.short
data[data == "?"] <- NA
data[1:11] <- data[1:11] %>% mutate_if(is.character,as.numeric) # Changing strings that are numbers to numbers
# Changing the 0,1 to NO and YES. The no means they dont get a point and the yes means they did.
data[1:10][data[1:10] == 0] <- "NO"
data[1:10][data[1:10] == 1] <- "YES"
data <- data[-c(which(is.na(data$age))), ]
boxplot(data$age, main="Age of people taking ASD test", ylab="Age", col="cadetblue1")
data <- data[-c(which(data$age == 383)),]
boxplot(data$age, main="Age of people taking ASD test", ylab="Age", col="cadetblue1")
boxplot(log10(data$age), main="Age of people taking ASD test", ylab="10log Age", col="cadetblue1")
df <- data.frame(x = rep(paste0("Q", c("01", "02", "03", "04", "05", "06", "07", "08", "09", "10")), each = 2),
y = rep(0, each=20),
group = rep(c("YES", "NO"), time = 10))
df$y[1] <- sum(data$a1_score == "YES")
df$y[2] <- sum(data$a1_score == "NO")
df$y[3] <- sum(data$a2_score == "YES")
df$y[4] <- sum(data$a2_score == "NO")
df$y[5] <- sum(data$a3_score == "YES")
df$y[6] <- sum(data$a3_score == "NO")
df$y[7] <- sum(data$a4_score == "YES")
df$y[8] <- sum(data$a4_score == "NO")
df$y[9] <- sum(data$a5_score == "YES")
df$y[10] <- sum(data$a5_score == "NO")
df$y[11] <- sum(data$a6_score == "YES")
df$y[12] <- sum(data$a6_score == "NO")
df$y[13] <- sum(data$a7_score == "YES")
df$y[14] <- sum(data$a7_score == "NO")
df$y[15] <- sum(data$a8_score == "YES")
df$y[16] <- sum(data$a8_score == "NO")
df$y[17] <- sum(data$a9_score == "YES")
df$y[18] <- sum(data$a9_score == "NO")
df$y[19] <- sum(data$a10_score == "YES")
df$y[20] <- sum(data$a10_score == "NO")
ggp <- ggplot(df, aes(x = x, y = y, fill = group, label = y)) +  # Create stacked bar chart
geom_bar(stat = "identity") + ggtitle("Q10 test Anwsers") + xlab("Question number") + ylab("Amount of anwsers") + scale_fill_manual(values = viridis(5))
ggp
boxplot(data$end_score ~ data$autism, col=c("cadetblue4", "cadetblue3"), xlab="Has ASD", ylab="Q10 end score", main="Q10 scores vs actually having ASD")
t.test(data$end_score, subset=data$autism, var.equal = TRUE)
df <- data.frame(x = rep(1, each=4),
y = rep(0, each=4),
group = c("ASD and Family member with ASD", "ASD and no Family member with ASD", "no ASD and Family member with ASD", "no ASD and no Family member with ASD"))
df$y <- c(sum(data$class_asd == "YES" & data$autism == "yes"), sum(data$class_asd == "NO" & data$autism == "yes"),
sum(data$class_asd == "YES" & data$autism == "no"), sum(data$class_asd == "NO" & data$autism == "no"))
ggp <- ggplot(df, aes(x = x, y = y, fill = group, label = y)) +  # Create stacked bar chart
geom_bar(stat = "identity") + ggtitle("ASD and family member with ASD") + xlab("") + ylab("amount of people") + scale_fill_manual(values = viridis(5))
ggp
grouped <- data %>%
mutate(positives = case_when(
autism == "yes" ~ "ASD",
autism == "no" ~ "no ASD"
))
ggplot(grouped, aes(x = end_score, y = age, colour = positives)) +
geom_point() + geom_jitter() + ggtitle("End score compared to age") + geom_smooth(method="lm")
cor.test(data$end_score, data$age, method="pearson")
write.csv(data, "Filtered_data.csv")
knitr::opts_chunk$set(echo = TRUE)
data <- read.csv('Autism_Data.arff')
codebook <- read.csv('codebook.csv')
colnames(data) <- codebook$Variable.name.short
get_readable <- function(short) {
if (!short %in% codebook$Variable.name.short) {
return("This isn't a column")
} else {
return(codebook$Variable.name.human.readable[which(codebook$Variable.name.short == short)])
}
}
knitr::kable(codebook)
data[data == "?"] <- NA
data[1:11] <- data[1:11] %>% mutate_if(is.character,as.numeric) # Changing strings that are numbers to numbers
install.packages("ggplot2")  # Install and load ggplot2
install.packages("dplyr")
install.packages("viridis")  # Install
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
knitr::opts_chunk$set(echo = TRUE)
data[data == "?"] <- NA
data[1:11] <- data[1:11] %>% mutate_if(is.character,as.numeric) # Changing strings that are numbers to numbers
data[data == "?"] <- NA
data[1:11] <- data[1:11] %>% mutate_if(is.character,as.numeric) # Changing strings that are numbers to numbers
library("ggplot2")
library("dplyr")
library("viridis")
data[data == "?"] <- NA
data[1:11] <- data[1:11] %>% mutate_if(is.character,as.numeric) # Changing strings that are numbers to numbers
# Changing the 0,1 to NO and YES. The no means they dont get a point and the yes means they did.
data[1:10][data[1:10] == 0] <- "NO"
data[1:10][data[1:10] == 1] <- "YES"
summary(data)
data <- data[-c(which(is.na(data$age))), ]
data <- data[-c(which(data$age == 383)),]
boxplot(data$age, main="Age of people taking ASD test", ylab="Age", col="cadetblue1")
boxplot(log10(data$age), main="Age of people taking ASD test", ylab="10log Age", col="cadetblue1")
data
write.table(data, "filtered.csv", row.names=FALSE, sep=",")
knitr::opts_chunk$set(echo = TRUE)
algorithms <- read.csv("algorithms.csv")
ggp <- ggplot(data=algorithms, aes(x=algorithm, y=accuracy), label = y, fill=group) +
geom_col(position = "dodge", color = c("#FFFFFF", "#FFFFFF", "#00FF00", "#FFFFFF", "#FFFFFF", "#FFFFFF"), show.legend = FALSE) +
ggtitle("Multiple Algorithms comparison")
install.packages("ggplot2")  # Install and load ggplot2
install.packages("dplyr")
install.packages("viridis")  # Install
install.packages("ggplot2")
install.packages("dplyr")
library("ggplot2")
library("dplyr")
library("viridis")
algorithms <- read.csv("algorithms.csv")
ggp <- ggplot(data=algorithms, aes(x=algorithm, y=accuracy), label = y, fill=group) +
geom_col(position = "dodge", color = c("#FFFFFF", "#FFFFFF", "#00FF00", "#FFFFFF", "#FFFFFF", "#FFFFFF"), show.legend = FALSE) +
ggtitle("Multiple Algorithms comparison")
ggp
install.packages("dplyr")
