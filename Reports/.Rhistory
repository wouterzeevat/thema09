df$y[17] <- sum(data$a9_score == "YES")
df$y[18] <- sum(data$a9_score == "NO")
df$y[19] <- sum(data$a10_score == "YES")
df$y[20] <- sum(data$a10_score == "NO")
ggp <- ggplot(df, aes(x = x, y = y, fill = group, label = y)) +  # Create stacked bar chart
geom_bar(stat = "identity") + ggtitle("Q10 test Anwsers") + xlab("Question number") + ylab("Amount of anwsers") + scale_fill_manual(values = viridis(5))
ggp
boxplot(data$end_score ~ data$autism, col=c("cadetblue4", "cadetblue3"), xlab="Has ASD", ylab="Q10 end score", main="Q10 scores vs actually having ASD")
t.test(data$end_score, subset=data$autism, var.equal = TRUE)
df <- data.frame(x = rep(1, each=4),
y = rep(0, each=4),
group = c("ASD and Family member with ASD", "ASD and no Family member with ASD", "no ASD and Family member with ASD", "no ASD and no Family member with ASD"))
df$y <- c(sum(data$class_asd == "YES" & data$autism == "yes"), sum(data$class_asd == "NO" & data$autism == "yes"),
sum(data$class_asd == "YES" & data$autism == "no"), sum(data$class_asd == "NO" & data$autism == "no"))
ggp <- ggplot(df, aes(x = x, y = y, fill = group, label = y)) +  # Create stacked bar chart
geom_bar(stat = "identity") + ggtitle("ASD and family member with ASD") + xlab("") + ylab("amount of people") + scale_fill_manual(values = viridis(5))
ggp
grouped <- data %>%
mutate(positives = case_when(
autism == "yes" ~ "ASD",
autism == "no" ~ "no ASD"
))
ggplot(grouped, aes(x = end_score, y = age, colour = positives)) +
geom_point() + geom_jitter() + ggtitle("End score compared to age") + geom_smooth(method="lm")
cor.test(data$end_score, data$age, method="pearson")
write.csv(data, "Filtered_data.csv")
knitr::opts_chunk$set(echo = TRUE)
data <- read.csv('Autism_Data.arff')
codebook <- read.csv('codebook.csv')
colnames(data) <- codebook$Variable.name.short
get_readable <- function(short) {
if (!short %in% codebook$Variable.name.short) {
return("This isn't a column")
} else {
return(codebook$Variable.name.human.readable[which(codebook$Variable.name.short == short)])
}
}
knitr::kable(codebook)
data[data == "?"] <- NA
data[1:11] <- data[1:11] %>% mutate_if(is.character,as.numeric) # Changing strings that are numbers to numbers
install.packages("ggplot2")  # Install and load ggplot2
install.packages("dplyr")
install.packages("viridis")  # Install
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
knitr::opts_chunk$set(echo = TRUE)
data[data == "?"] <- NA
data[1:11] <- data[1:11] %>% mutate_if(is.character,as.numeric) # Changing strings that are numbers to numbers
data[data == "?"] <- NA
data[1:11] <- data[1:11] %>% mutate_if(is.character,as.numeric) # Changing strings that are numbers to numbers
library("ggplot2")
library("dplyr")
library("viridis")
data[data == "?"] <- NA
data[1:11] <- data[1:11] %>% mutate_if(is.character,as.numeric) # Changing strings that are numbers to numbers
# Changing the 0,1 to NO and YES. The no means they dont get a point and the yes means they did.
data[1:10][data[1:10] == 0] <- "NO"
data[1:10][data[1:10] == 1] <- "YES"
summary(data)
data <- data[-c(which(is.na(data$age))), ]
data <- data[-c(which(data$age == 383)),]
boxplot(data$age, main="Age of people taking ASD test", ylab="Age", col="cadetblue1")
boxplot(log10(data$age), main="Age of people taking ASD test", ylab="10log Age", col="cadetblue1")
data
write.table(data, "filtered.csv", row.names=FALSE, sep=",")
knitr::opts_chunk$set(echo = TRUE)
algorithms <- read.csv("algorithms.csv")
ggp <- ggplot(data=algorithms, aes(x=algorithm, y=accuracy), label = y, fill=group) +
geom_col(position = "dodge", color = c("#FFFFFF", "#FFFFFF", "#00FF00", "#FFFFFF", "#FFFFFF", "#FFFFFF"), show.legend = FALSE) +
ggtitle("Multiple Algorithms comparison")
install.packages("ggplot2")  # Install and load ggplot2
install.packages("dplyr")
install.packages("viridis")  # Install
install.packages("ggplot2")
install.packages("dplyr")
library("ggplot2")
library("dplyr")
library("viridis")
algorithms <- read.csv("algorithms.csv")
ggp <- ggplot(data=algorithms, aes(x=algorithm, y=accuracy), label = y, fill=group) +
geom_col(position = "dodge", color = c("#FFFFFF", "#FFFFFF", "#00FF00", "#FFFFFF", "#FFFFFF", "#FFFFFF"), show.legend = FALSE) +
ggtitle("Multiple Algorithms comparison")
ggp
install.packages("dplyr")
knitr::opts_chunk$set(echo = TRUE)
install.packages("ggplot2")  # Install and load ggplot2
install.packages("dplyr")
install.packages("viridis")  # Install
library("ggplot2")
library("dplyr")
library("viridis")
data <- read.csv('Autism_Data.arff')
codebook <- read.csv('codebook.csv')
colnames(data) <- codebook$Variable.name.short
get_readable <- function(short) {
if (!short %in% codebook$Variable.name.short) {
return("This isn't a column")
} else {
return(codebook$Variable.name.human.readable[which(codebook$Variable.name.short == short)])
}
}
knitr::kable(codebook)
ncol(data)
nrow(data)
data[data == "?"] <- NA
data[1:11] <- data[1:11] %>% mutate_if(is.character,as.numeric) # Changing strings that are numbers to numbers
# Changing the 0,1 to NO and YES. The no means they dont get a point and the yes means they did.
data[1:10][data[1:10] == 0] <- "NO"
data[1:10][data[1:10] == 1] <- "YES"
summary(data)
data <- data[-c(which(is.na(data$age))), ]
boxplot(data$age, main="Age of people taking ASD test", ylab="Age", col="cadetblue1")
data <- data[-c(which(data$age == 383)),]
boxplot(data$age, main="Age of people taking ASD test", ylab="Age", col="cadetblue1")
boxplot(log10(data$age), main="Age of people taking ASD test", ylab="10log Age", col="cadetblue1")
df <- data.frame(x = rep(paste0("Q", c("01", "02", "03", "04", "05", "06", "07", "08", "09", "10")), each = 2),
y = rep(0, each=20),
group = rep(c("YES", "NO"), time = 10))
df$y[1] <- sum(data$a1_score == "YES")
df$y[2] <- sum(data$a1_score == "NO")
df$y[3] <- sum(data$a2_score == "YES")
df$y[4] <- sum(data$a2_score == "NO")
df$y[5] <- sum(data$a3_score == "YES")
df$y[6] <- sum(data$a3_score == "NO")
df$y[7] <- sum(data$a4_score == "YES")
df$y[8] <- sum(data$a4_score == "NO")
df$y[9] <- sum(data$a5_score == "YES")
df$y[10] <- sum(data$a5_score == "NO")
df$y[11] <- sum(data$a6_score == "YES")
df$y[12] <- sum(data$a6_score == "NO")
df$y[13] <- sum(data$a7_score == "YES")
df$y[14] <- sum(data$a7_score == "NO")
df$y[15] <- sum(data$a8_score == "YES")
df$y[16] <- sum(data$a8_score == "NO")
df$y[17] <- sum(data$a9_score == "YES")
df$y[18] <- sum(data$a9_score == "NO")
df$y[19] <- sum(data$a10_score == "YES")
df$y[20] <- sum(data$a10_score == "NO")
ggp <- ggplot(df, aes(x = x, y = y, fill = group, label = y)) +  # Create stacked bar chart
geom_bar(stat = "identity") + ggtitle("Q10 test Anwsers") + xlab("Question number") + ylab("Amount of anwsers") + scale_fill_manual(values = viridis(5))
ggp
boxplot(data$end_score ~ data$autism, col=c("cadetblue4", "cadetblue3"), xlab="Has ASD", ylab="Q10 end score", main="Q10 scores vs actually having ASD")
t.test(data$end_score, subset=data$autism, var.equal = TRUE)
df <- data.frame(x = rep(1, each=4),
y = rep(0, each=4),
group = c("ASD and Family member with ASD", "ASD and no Family member with ASD", "no ASD and Family member with ASD", "no ASD and no Family member with ASD"))
df$y <- c(sum(data$class_asd == "YES" & data$autism == "yes"), sum(data$class_asd == "NO" & data$autism == "yes"),
sum(data$class_asd == "YES" & data$autism == "no"), sum(data$class_asd == "NO" & data$autism == "no"))
ggp <- ggplot(df, aes(x = x, y = y, fill = group, label = y)) +  # Create stacked bar chart
geom_bar(stat = "identity") + ggtitle("ASD and family member with ASD") + xlab("") + ylab("amount of people") + scale_fill_manual(values = viridis(5))
ggp
grouped <- data %>%
mutate(positives = case_when(
autism == "yes" ~ "ASD",
autism == "no" ~ "no ASD"
))
ggplot(grouped, aes(x = end_score, y = age, colour = positives)) +
geom_point() + geom_jitter() + ggtitle("End score compared to age") + geom_smooth(method="lm")
cor.test(data$end_score, data$age, method="pearson")
algorithms <- read.csv("algorithms.csv")
ggp <- ggplot(data=algorithms, aes(x=algorithm, y=accuracy), label = y, fill=group) +
geom_col(position = "dodge", color = c("#FFFFFF", "#FFFFFFFF", "#00FF00", "#FFFFFF", "#FFFFFF", "#FFFFFF"), show.legend = FALSE) +
ggtitle("Multiple Algorithms comparison")
ggp
ggp <- ggplot(data=algorithms, aes(x=algorithm, y=roc), label = y, fill=group, ylim=1.5) +
geom_col(position = "dodge", color = c("#FFFFFF", "#00FF00", "#FFFFFF", "#FFFFFF", "#FFFFFF", "#FFFFFF"), show.legend = FALSE) +
ggtitle("Area under the curve (Standard deviation vs)"
+ geom_errorbar(data=algorithms, mapping=aes(x=algorithm, ymin=roc-error, ymax=roc+error), width=0.2, size=1, color="#00AAAA"))
ggp
algorithms <- read.csv("algorithms.csv")
ggp <- ggplot(data=algorithms, aes(x=algorithm, y=accuracy), label = y, fill=group) +
geom_col(position = "dodge", color = c("#FFFFFF", "#FFFFFFFF", "#00FF00", "#FFFFFF", "#FFFFFF", "#FFFFFF"), show.legend = FALSE) +
ggtitle("Multiple Algorithms comparison")
ggp
algorithms <- read.csv("algorithms.csv")
ggp <- ggplot(data=algorithms, aes(x=algorithm, y=accuracy), label = y, fill=group) +
geom_col(position = "dodge", color = c("#FFFFFF", "#FF00FF", "#00FF00", "#FFFFFF", "#FFFFFF", "#FFFFFF"), show.legend = FALSE) +
ggtitle("Multiple Algorithms comparison")
ggp
algorithms <- read.csv("algorithms.csv")
ggp <- ggplot(data=algorithms, aes(x=algorithm, y=accuracy), label = y, fill=group) +
geom_col(position = "dodge", color = c("#FFFFFF", "#FF00FF", "#FFFF00", #00FF00", "#FFFFFF", "#FFFFFF", "#FFFFFF"), show.legend = FALSE) +
ggtitle("Multiple Algorithms comparison")
ggp
algorithms <- read.csv("algorithms.csv")
ggp <- ggplot(data=algorithms, aes(x=algorithm, y=accuracy), label = y, fill=group) +
geom_col(position = "dodge", color = c("#FFFFFF", "#FF00FF", "#FFFF00", "#00FF00", "#FFFFFF", "#FFFFFF", "#FFFFFF"), show.legend = FALSE) +
ggtitle("Multiple Algorithms comparison")
ggp
algorithms <- read.csv("algorithms.csv")
ggp <- ggplot(data=algorithms, aes(x=algorithm, y=accuracy), label = y, fill=group) +
geom_col(position = "dodge", color = c("#FFFFFF", "#FF00FF", "#00FF00", "#FFFFFF", "#FFFFFF", "#FFFFFF"), show.legend = FALSE) +
ggtitle("Multiple Algorithms comparison")
ggp
algorithms <- read.csv("algorithms.csv")
ggp <- ggplot2(data=algorithms, aes(x=algorithm, y=accuracy), label = y, fill=group) +
geom_col(position = "dodge", color = c("#FFFFFF", "#FF00FF", "#00FF00", "#FFFFFF", "#FFFFFF", "#FFFFFF"), show.legend = FALSE) +
ggtitle("Multiple Algorithms comparison")
algorithms <- read.csv("algorithms.csv")
ggp <- ggplot(data=algorithms, aes(x=algorithm, y=accuracy), label = y, fill=group) +
geom_col(position = "dodge", color = c("#FFFFFF", "#FF00FF", "#00FF00", "#FFFFFF", "#FFFFFF", "#FFFFFF"), show.legend = FALSE) +
ggtitle("Multiple Algorithms comparison")
ggp
ggp <- ggplot(data=algorithms, aes(x=algorithm, y=roc), label = y, fill=group, ylim=1.5) +
geom_col(position = "dodge", show.legend = FALSE) +
ggtitle("Area under the curve (Standard deviation vs)"
+ geom_errorbar(data=algorithms, mapping=aes(x=algorithm, ymin=roc-error, ymax=roc+error), width=0.2, size=1, color="#00AAAA"))
ggp
knitr::opts_chunk$set(echo = TRUE)
install.packages("ggplot2")  # Install and load ggplot2
install.packages("dplyr")
install.packages("viridis")  # Install
knitr::opts_chunk$set(echo = TRUE)
library("ggplot2")
library("dplyr")
library("viridis")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("dplyr")
install.packages("dplyr")
install.packages("viridis")
knitr::opts_chunk$set(echo = TRUE)
ggp <- ggplot(data=algorithms, aes(x=algorithm, y=roc), label = y, fill=group, ylim=1.5) +
geom_col(position = "dodge", show.legend = FALSE) +
ggtitle("Area under the curve (Standard deviation vs)"
+ geom_errorbar(data=algorithms, mapping=aes(x=algorithm, ymin=roc-error, ymax=roc+error), width=0.2, size=1, color="#00AAAA"))
knitr::opts_chunk$set(echo = TRUE)
#install.packages("ggplot2")  # Install and load ggplot2
#install.packages("dplyr")
#install.packages("viridis")  # Install
library("ggplot2")
library("dplyr")
library("viridis")
data <- read.csv('Autism_Data.arff')
codebook <- read.csv('codebook.csv')
colnames(data) <- codebook$Variable.name.short
get_readable <- function(short) {
if (!short %in% codebook$Variable.name.short) {
return("This isn't a column")
} else {
return(codebook$Variable.name.human.readable[which(codebook$Variable.name.short == short)])
}
}
knitr::kable(codebook)
ncol(data)
nrow(data)
data[data == "?"] <- NA
data[1:11] <- data[1:11] %>% mutate_if(is.character,as.numeric) # Changing strings that are numbers to numbers
# Changing the 0,1 to NO and YES. The no means they dont get a point and the yes means they did.
data[1:10][data[1:10] == 0] <- "NO"
data[1:10][data[1:10] == 1] <- "YES"
summary(data)
data <- data[-c(which(is.na(data$age))), ]
boxplot(data$age, main="Age of people taking ASD test", ylab="Age", col="cadetblue1")
data <- data[-c(which(data$age == 383)),]
boxplot(data$age, main="Age of people taking ASD test", ylab="Age", col="cadetblue1")
boxplot(log10(data$age), main="Age of people taking ASD test", ylab="10log Age", col="cadetblue1")
df <- data.frame(x = rep(paste0("Q", c("01", "02", "03", "04", "05", "06", "07", "08", "09", "10")), each = 2),
y = rep(0, each=20),
group = rep(c("YES", "NO"), time = 10))
df$y[1] <- sum(data$a1_score == "YES")
df$y[2] <- sum(data$a1_score == "NO")
df$y[3] <- sum(data$a2_score == "YES")
df$y[4] <- sum(data$a2_score == "NO")
df$y[5] <- sum(data$a3_score == "YES")
df$y[6] <- sum(data$a3_score == "NO")
df$y[7] <- sum(data$a4_score == "YES")
df$y[8] <- sum(data$a4_score == "NO")
df$y[9] <- sum(data$a5_score == "YES")
df$y[10] <- sum(data$a5_score == "NO")
df$y[11] <- sum(data$a6_score == "YES")
df$y[12] <- sum(data$a6_score == "NO")
df$y[13] <- sum(data$a7_score == "YES")
df$y[14] <- sum(data$a7_score == "NO")
df$y[15] <- sum(data$a8_score == "YES")
df$y[16] <- sum(data$a8_score == "NO")
df$y[17] <- sum(data$a9_score == "YES")
df$y[18] <- sum(data$a9_score == "NO")
df$y[19] <- sum(data$a10_score == "YES")
df$y[20] <- sum(data$a10_score == "NO")
ggp <- ggplot(df, aes(x = x, y = y, fill = group, label = y)) +  # Create stacked bar chart
geom_bar(stat = "identity") + ggtitle("Q10 test Anwsers") + xlab("Question number") + ylab("Amount of anwsers") + scale_fill_manual(values = viridis(5))
ggp
boxplot(data$end_score ~ data$autism, col=c("cadetblue4", "cadetblue3"), xlab="Has ASD", ylab="Q10 end score", main="Q10 scores vs actually having ASD")
t.test(data$end_score, subset=data$autism, var.equal = TRUE)
df <- data.frame(x = rep(1, each=4),
y = rep(0, each=4),
group = c("ASD and Family member with ASD", "ASD and no Family member with ASD", "no ASD and Family member with ASD", "no ASD and no Family member with ASD"))
df$y <- c(sum(data$class_asd == "YES" & data$autism == "yes"), sum(data$class_asd == "NO" & data$autism == "yes"),
sum(data$class_asd == "YES" & data$autism == "no"), sum(data$class_asd == "NO" & data$autism == "no"))
ggp <- ggplot(df, aes(x = x, y = y, fill = group, label = y)) +  # Create stacked bar chart
geom_bar(stat = "identity") + ggtitle("ASD and family member with ASD") + xlab("") + ylab("amount of people") + scale_fill_manual(values = viridis(5))
ggp
grouped <- data %>%
mutate(positives = case_when(
autism == "yes" ~ "ASD",
autism == "no" ~ "no ASD"
))
ggplot(grouped, aes(x = end_score, y = age, colour = positives)) +
geom_point() + geom_jitter() + ggtitle("End score compared to age") + geom_smooth(method="lm")
cor.test(data$end_score, data$age, method="pearson")
algorithms <- read.csv("algorithms.csv")
ggp <- ggplot(data=algorithms, aes(x=algorithm, y=accuracy), label = y, fill=group) +
geom_col(position = "dodge", color = c("#FFFFFF", "#FF00FF", "#00FF00", "#FFFFFF", "#FFFFFF", "#FFFFFF"), show.legend = FALSE) +
ggtitle("Multiple Algorithms comparison")
ggp
ggp <- ggplot(data=algorithms, aes(x=algorithm, y=roc), label = y, fill=group, ylim=1.5) +
geom_col(position = "dodge", show.legend = FALSE) +
ggtitle("Area under the curve (Standard deviation vs)"
+ geom_errorbar(data=algorithms, mapping=aes(x=algorithm, ymin=roc-error, ymax=roc+error), width=0.2, size=1, color="#00AAAA"))
ggp
algorithms <- read.csv("algorithms.csv")
ggp <- ggplot(data=algorithms, aes(x=algorithm, y=accuracy), label = y, fill=group) +
ggtitle("Multiple Algorithms comparison")
ggp
algorithms <- read.csv("algorithms.csv")
ggp <- ggplot(data=algorithms, aes(x=algorithm, y=accuracy), label = y, fill=group) +
geom_col(position = "dodge", color = c("#FFFFFF", "#FF00FF", "#00FF00", "#FFFFFF", "#FFFFFF", "#FFFFFF"), show.legend = FALSE) +
ggtitle("Multiple Algorithms comparison")
ggp
algorithms <- read.csv("algorithms.csv")
ggp <- ggplot(data=algorithms, aes(x=algorithm, y=accuracy), label = y, fill=group) +
ggtitle("Multiple Algorithms comparison")
ggp
algorithms <- read.csv("algorithms.csv")
ggp <- ggplot(data=algorithms, aes(x=algorithm, y=accuracy), label = y, fill=group) +
ggtitle("Multiple Algorithms comparison")
ggp
View(algorithms)
View(algorithms)
algorithms <- read.csv("algorithms.csv")
ggp <- ggplot(data=algorithms, aes(x=algorithm, y=accuracy), label = y, fill=group) +
geom_col(position = "dodge", show.legend = FALSE) +
ggtitle("Multiple Algorithms comparison")
ggp
algorithms <- read.csv("algorithms.csv")
ggp <- ggplot(data=algorithms, aes(x=algorithm, y=accuracy), label = y, fill=group) +
geom_col(position = "dodge", show.legend = FALSE) +
stat_compare_means(aes(group = supp), label = "p.signif",
label.y = c(16, 25, 29))
ggp <- ggplot(data=algorithms, aes(x=algorithm, y=roc), label = y, fill=group, ylim=1.5) +
geom_col(position = "dodge", show.legend = FALSE) +
ggtitle("Area under the curve (Standard deviation vs)"
+ geom_errorbar(data=algorithms, mapping=aes(x=algorithm, ymin=roc-error, ymax=roc+error), width=0.2, linewidth=1, color="#00AAAA"))
ggp
ggp <- ggplot(data=algorithms, aes(x=algorithm, y=roc), label = y, fill=group, ylim=1.5) +
geom_col(position = "dodge", show.legend = FALSE) +
ggtitle("Area under the curve (Standard deviation vs)"
+ geom_errorbar(aes(ymin = len, ymax= len + 2), width = 0.2)
ggp
ggp <- ggplot(data=algorithms, aes(x=algorithm, y=roc), label = y, fill=group, ylim=1.5) +
geom_col(position = "dodge", show.legend = FALSE) +
ggtitle("Area under the curve (Standard deviation vs)" +
geom_errorbar(aes(ymin = len, ymax= len + 2), width = 0.2)
ggp
ggp <- ggplot(data=algorithms, aes(x=algorithm, y=roc), label = y, fill=group, ylim=1.5) +
geom_col(position = "dodge", show.legend = FALSE) +
ggtitle("Area under the curve (Standard deviation vs)") +
geom_errorbar(aes(ymin = len, ymax= len + 2), width = 0.2)
ggp
ggp <- ggplot(data=algorithms, aes(x=algorithm, y=roc), label = y, fill=group, ylim=1.5) +
geom_col(position = "dodge", show.legend = FALSE) +
ggtitle("Area under the curve (Standard deviation vs)") +
geom_errorbar(aes(ymin = len, ymax= 2), width = 0.2)
ggp
ggp <- ggplot(data=algorithms, aes(x=algorithm, y=roc), label = y, fill=group, ylim=1.5) +
geom_col(position = "dodge", show.legend = FALSE) +
ggtitle("Area under the curve (Standard deviation vs)") +
geom_errorbar(aes(ymin = 2, ymax= 2), width = 0.2)
ggp
ggp <- ggplot(data=algorithms, aes(x=algorithm, y=roc), label = y, fill=group, ylim=1.5) +
geom_col(position = "dodge", show.legend = FALSE) +
ggtitle("Area under the curve (Standard deviation vs)") +
geom_errorbar(aes(ymin = y, ymax= 2), width = 0.2)
ggp
ggp <- ggplot(data=algorithms, aes(x=algorithm, y=roc), label = y, fill=group, ylim=1.5) +
geom_col(position = "dodge", show.legend = FALSE) +
ggtitle("Area under the curve (Standard deviation vs)") +
geom_errorbar(aes(ymin = roc-error, ymax= 2), width = 0.2)
ggp
ggp <- ggplot(data=algorithms, aes(x=algorithm, y=roc), label = y, fill=group, ylim=1.5) +
geom_col(position = "dodge", show.legend = FALSE) +
ggtitle("Area under the curve (Standard deviation vs)") +
geom_errorbar(aes(ymin = roc-error, ymax= roc+error), width = 0.2)
ggp
algorithms <- read.csv("algorithms.csv")
ggp <- ggplot(data=algorithms, aes(x=algorithm, y=accuracy), label = y, fill=group) +
geom_col(position = "dodge", show.legend = FALSE) +
ggtitle("Multiple Algorithms comparison")
ggp
ggboxplot(data$end_score ~ data$autism, col=c("cadetblue4", "cadetblue3"), xlab="Has ASD", ylab="Q10 end score", main="Q10 scores vs actually having ASD")
ggplot(data$end_score ~ data$autism, col=c("cadetblue4", "cadetblue3"), xlab="Has ASD", ylab="Q10 end score", main="Q10 scores vs actually having ASD")
#boxplot(data$end_score ~ data$autism, col=c("cadetblue4", "cadetblue3"), xlab="Has ASD", ylab="Q10 end score", main="Q10 scores vs actually having ASD")
ggboxplot()
#boxplot(data$end_score ~ data$autism, col=c("cadetblue4", "cadetblue3"), xlab="Has ASD", ylab="Q10 end score", main="Q10 scores vs actually having ASD")
ggplot(data=data, aes(x=end_score, y)) + geom_boxplot()
#boxplot(data$end_score ~ data$autism, col=c("cadetblue4", "cadetblue3"), xlab="Has ASD", ylab="Q10 end score", main="Q10 scores vs actually having ASD")
ggplot(data=data, aes(x=end_score, y=autism)) + geom_boxplot()
#boxplot(data$end_score ~ data$autism, col=c("cadetblue4", "cadetblue3"), xlab="Has ASD", ylab="Q10 end score", main="Q10 scores vs actually having ASD")
ggplot(data=data, aes(x=end_score, y=autism)) + geom_boxplot()
+ scale_fill_manual(values = viridis(5))
#boxplot(data$end_score ~ data$autism, col=c("cadetblue4", "cadetblue3"), xlab="Has ASD", ylab="Q10 end score", main="Q10 scores vs actually having ASD")
ggplot(data=data, aes(x=end_score, y=autism)) + geom_boxplot() +
scale_fill_manual(values = viridis(5))
#boxplot(data$end_score ~ data$autism, col=c("cadetblue4", "cadetblue3"), xlab="Has ASD", ylab="Q10 end score", main="Q10 scores vs actually having ASD")
ggplot(data=data, aes(x=end_score, y=autism)) + geom_boxplot(fill=viridis(5))
#boxplot(data$end_score ~ data$autism, col=c("cadetblue4", "cadetblue3"), xlab="Has ASD", ylab="Q10 end score", main="Q10 scores vs actually having ASD")
ggplot(data=data, aes(x=end_score, y=autism)) + geom_boxplot(fill=viridis(2))
viridis(2)
viridis(2)[1]
viridis(5)[1:2]
#boxplot(data$end_score ~ data$autism, col=c("cadetblue4", "cadetblue3"), xlab="Has ASD", ylab="Q10 end score", main="Q10 scores vs actually having ASD")
ggplot(data=data, aes(x=end_score, y=autism)) + geom_boxplot(fill=viridis(4)[1:2])
#boxplot(data$end_score ~ data$autism, col=c("cadetblue4", "cadetblue3"), xlab="Has ASD", ylab="Q10 end score", main="Q10 scores vs actually having ASD")
ggplot(data=data, aes(x=end_score, y=autism)) + geom_boxplot(fill=viridis(6)[1:2])
#boxplot(data$end_score ~ data$autism, col=c("cadetblue4", "cadetblue3"), xlab="Has ASD", ylab="Q10 end score", main="Q10 scores vs actually having ASD")
ggplot(data=data, aes(x=end_score, y=autism)) + geom_boxplot(fill=viridis(6)[1:3])
#boxplot(data$end_score ~ data$autism, col=c("cadetblue4", "cadetblue3"), xlab="Has ASD", ylab="Q10 end score", main="Q10 scores vs actually having ASD")
ggplot(data=data, aes(x=end_score, y=autism)) + geom_boxplot(fill=viridis(6)[1, 2])
#boxplot(data$end_score ~ data$autism, col=c("cadetblue4", "cadetblue3"), xlab="Has ASD", ylab="Q10 end score", main="Q10 scores vs actually having ASD")
ggplot(data=data, aes(x=end_score, y=autism)) + geom_boxplot(fill=viridis(6)[1:2])
#boxplot(data$end_score ~ data$autism, col=c("cadetblue4", "cadetblue3"), xlab="Has ASD", ylab="Q10 end score", main="Q10 scores vs actually having ASD")
ggplot(data=data, aes(x=end_score, y=autism)) + geom_boxplot(fill=viridis(6)[4:6])
#boxplot(data$end_score ~ data$autism, col=c("cadetblue4", "cadetblue3"), xlab="Has ASD", ylab="Q10 end score", main="Q10 scores vs actually having ASD")
ggplot(data=data, aes(x=end_score, y=autism)) + geom_boxplot(fill=viridis(6)[4:5])
#boxplot(data$end_score ~ data$autism, col=c("cadetblue4", "cadetblue3"), xlab="Has ASD", ylab="Q10 end score", main="Q10 scores vs actually having ASD")
ggplot(data=data, aes(x=end_score, y=autism)) + geom_boxplot(fill=viridis(6)[2:3])
#boxplot(data$end_score ~ data$autism, col=c("cadetblue4", "cadetblue3"), xlab="Has ASD", ylab="Q10 end score", main="Q10 scores vs actually having ASD")
ggplot(data=data, aes(x=end_score, y=autism)) + geom_boxplot(fill=viridis(6)[2:3]) +
ggtitle("End score compared to having ASD")
df <- data.frame(x = rep(paste0("Q", c("01", "02", "03", "04", "05", "06", "07", "08", "09", "10")), each = 2),
y = rep(0, each=20),
group = rep(c("YES", "NO"), time = 10))
df$y[1] <- sum(data$a1_score == "YES")
df$y[2] <- sum(data$a1_score == "NO")
df$y[3] <- sum(data$a2_score == "YES")
df$y[4] <- sum(data$a2_score == "NO")
df$y[5] <- sum(data$a3_score == "YES")
df$y[6] <- sum(data$a3_score == "NO")
df$y[7] <- sum(data$a4_score == "YES")
df$y[8] <- sum(data$a4_score == "NO")
df$y[9] <- sum(data$a5_score == "YES")
df$y[10] <- sum(data$a5_score == "NO")
df$y[11] <- sum(data$a6_score == "YES")
df$y[12] <- sum(data$a6_score == "NO")
df$y[13] <- sum(data$a7_score == "YES")
df$y[14] <- sum(data$a7_score == "NO")
df$y[15] <- sum(data$a8_score == "YES")
df$y[16] <- sum(data$a8_score == "NO")
df$y[17] <- sum(data$a9_score == "YES")
df$y[18] <- sum(data$a9_score == "NO")
df$y[19] <- sum(data$a10_score == "YES")
df$y[20] <- sum(data$a10_score == "NO")
ggp <- ggplot(df, aes(x = x, y = y, fill = group, label = y)) +  # Create stacked bar chart
geom_bar(stat = "identity") + ggtitle("Q10 test Anwsers") + xlab("Question number") + ylab("Amount of anwsers") + scale_fill_manual(values = viridis(5)) + theme(legend.title = "Autism")
ggp
df <- data.frame(x = rep(paste0("Q", c("01", "02", "03", "04", "05", "06", "07", "08", "09", "10")), each = 2),
y = rep(0, each=20),
group = rep(c("YES", "NO"), time = 10))
df$y[1] <- sum(data$a1_score == "YES")
df$y[2] <- sum(data$a1_score == "NO")
df$y[3] <- sum(data$a2_score == "YES")
df$y[4] <- sum(data$a2_score == "NO")
df$y[5] <- sum(data$a3_score == "YES")
df$y[6] <- sum(data$a3_score == "NO")
df$y[7] <- sum(data$a4_score == "YES")
df$y[8] <- sum(data$a4_score == "NO")
df$y[9] <- sum(data$a5_score == "YES")
df$y[10] <- sum(data$a5_score == "NO")
df$y[11] <- sum(data$a6_score == "YES")
df$y[12] <- sum(data$a6_score == "NO")
df$y[13] <- sum(data$a7_score == "YES")
df$y[14] <- sum(data$a7_score == "NO")
df$y[15] <- sum(data$a8_score == "YES")
df$y[16] <- sum(data$a8_score == "NO")
df$y[17] <- sum(data$a9_score == "YES")
df$y[18] <- sum(data$a9_score == "NO")
df$y[19] <- sum(data$a10_score == "YES")
df$y[20] <- sum(data$a10_score == "NO")
ggp <- ggplot(df, aes(x = x, y = y, fill = group, label = y)) +  # Create stacked bar chart
geom_bar(stat = "identity") + ggtitle("Q10 test Anwsers") + xlab("Question number") + ylab("Amount of anwsers") + scale_fill_manual(values = viridis(5)) + theme(legend.title = element_text("Autism"))
ggp
df <- data.frame(x = rep(paste0("Q", c("01", "02", "03", "04", "05", "06", "07", "08", "09", "10")), each = 2),
y = rep(0, each=20),
group = rep(c("YES", "NO"), time = 10))
df$y[1] <- sum(data$a1_score == "YES")
df$y[2] <- sum(data$a1_score == "NO")
df$y[3] <- sum(data$a2_score == "YES")
df$y[4] <- sum(data$a2_score == "NO")
df$y[5] <- sum(data$a3_score == "YES")
df$y[6] <- sum(data$a3_score == "NO")
df$y[7] <- sum(data$a4_score == "YES")
df$y[8] <- sum(data$a4_score == "NO")
df$y[9] <- sum(data$a5_score == "YES")
df$y[10] <- sum(data$a5_score == "NO")
df$y[11] <- sum(data$a6_score == "YES")
df$y[12] <- sum(data$a6_score == "NO")
df$y[13] <- sum(data$a7_score == "YES")
df$y[14] <- sum(data$a7_score == "NO")
df$y[15] <- sum(data$a8_score == "YES")
df$y[16] <- sum(data$a8_score == "NO")
df$y[17] <- sum(data$a9_score == "YES")
df$y[18] <- sum(data$a9_score == "NO")
df$y[19] <- sum(data$a10_score == "YES")
df$y[20] <- sum(data$a10_score == "NO")
ggp <- ggplot(df, aes(x = x, y = y, fill = group, label = y)) +  # Create stacked bar chart
geom_bar(stat = "identity") + ggtitle("Q10 test Anwsers") + xlab("Question number") + ylab("Amount of anwsers") + scale_fill_manual(values = viridis(5)) + labs(fill = "Autism")
ggp
